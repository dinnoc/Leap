Imports System.Data.OleDb
Imports System.Data
Partial Class _Default
    Inherits System.Web.UI.Page
    Public dt As System.Data.DataTable
    Public alphaArr(52) As Char

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
  
    End Sub
    Protected Sub btnRoutings_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnRoutings.Click
        Call GenerateRoutings()
    End Sub

    Protected Sub btnGetData_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnGetData.Click
        '  clear()
        getdata()
        GenerateRoutings()
    End Sub
#Region "Consume Spreadsheet"



    Sub getdata()

        'OPEN CONNECTION TO SPREADSHEET
        Dim oleDBconn As New OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Documents and Settings\dinnissj\My Documents\SourceCode\LeaP Source\LeaP\spcExample.xlsx;Extended Properties=Excel 12.0") 'Excel 12.0")

        oleDBconn.Open()
        'READ DATA FROM SHEET1 OF SPREADSHEET
        Dim oleDBcomm As New OleDbCommand("Select * from [sheet1$]", oleDBconn)

        Dim oleda As New OleDbDataAdapter

        oleda.SelectCommand = oleDBcomm

        Dim ds As New Data.DataSet
        'FILL SPREADSHEET DATA INTO DATA TABLE
        oleda.Fill(ds, "ShipPlanCom")

        oleDBconn.Close()
        dt = ds.Tables(0)

        '     alphaArr = ("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")
        Dim y As Integer = 0
        Dim n As Integer
        For n = 65 To 90
            Dim d As Char = Chr(n)
            alphaArr.SetValue(d, y)
            y = y + 1
        Next
        For n = 97 To 122
            Dim d As Char = Chr(n)
            alphaArr.SetValue(d, y)
            y = y + 1
        Next


        'START AT THE 1ST DATA ROW OF SPREADSHEET
        Dim countRow As Integer = 6
        Dim adapSPC As New ShipPlanComTableAdapters.QueriesTableAdapter

        Do Until countRow = 35

            Dim TPCOrdNo As String = dt.Rows(countRow).Item(2)

            If adapSPC.spcIDfromTPCOrderNumber(TPCOrdNo) = Nothing Then
                spc_insert_new_line(countRow)
            Else
                'if the line already exists, update with new data
                spc_update_line(countRow, adapSPC.spcIDfromTPCOrderNumber(TPCOrdNo))
            End If
            countRow = countRow + 1
        Loop




    End Sub

#End Region
#Region "Insert new line"


    Sub spc_insert_new_line(ByVal countrow As Integer)

        'FILL ALL THE VARIABLES FOR THE INPUT
        Dim TPCOrdNo As String = dt.Rows(countrow).Item(2)
        '--
        Dim TILFinalApproval As Date = Nothing
        If Not IsDBNull(dt.Rows(countrow).Item(5)) Then
            TILFinalApproval = dt.Rows(countrow).Item(5)
        End If
        '--
        Dim TPCConfirmedCollectionDate As Date = Nothing
        If Not IsDBNull(dt.Rows(countrow).Item(7)) Then
            TPCConfirmedCollectionDate = dt.Rows(countrow).Item(7)
        End If
        '--
        Dim itemcode As String = dt.Rows(countrow).Item(8) & dt.Rows(countrow).Item(9)
        '--
        Dim TPCOrderQuantity As Integer = dt.Rows(countrow).Item(12)
        '--
        Dim TILShippingMemoDate As Date
        Dim TILShippingMemoDateType As Type = dt.Rows(countrow).Item(6).GetType
        If TILShippingMemoDateType.FullName = "System.String" Then
            TILShippingMemoDate = DateTime.FromOADate(CDbl(dt.Rows(countrow).Item(6)))
        ElseIf TILShippingMemoDateType.FullName = "System.Date" Then
            TILShippingMemoDate = dt.Rows(countrow).Item(6)
        End If
        '--
        Dim adapSPC As New ShipPlanComTableAdapters.QueriesTableAdapter


        Dim spcline As Integer
        adapSPC.InsertSPCLine(itemcode, TPCOrderQuantity, TILFinalApproval, TILShippingMemoDate, TPCConfirmedCollectionDate, TPCOrdNo, 1, spcline)


        Dim adapBatch As New ShipPlanComTableAdapters.LeaP_spcBatchesTableAdapter

        Dim d As Char = Chr(10)

        Dim tilPlannedlot As String = Nothing
        Dim arrLot() As String = Nothing
        If Not IsDBNull(dt.Rows(countrow).Item(14)) Then
            tilPlannedlot = dt.Rows(countrow).Item(14)
            arrLot = Split(tilPlannedlot, d)
        End If


        Dim arrQty() As String = Nothing
        Dim TILPlannedQuantity As String = Nothing

        If Not IsDBNull(dt.Rows(countrow).Item(13)) Then
            If Not dt.Rows(countrow).Item(13) Like "*TBA*" Or dt.Rows(countrow).Item(13) = "" Then
                TILPlannedQuantity = dt.Rows(countrow).Item(13)
                arrQty = Split(TILPlannedQuantity, d)
            End If
        End If


        If Not arrLot Is Nothing Then
            'if there are no lots dont add anything
            Dim i As Integer = 0
            Do Until i = arrLot.Count

                Dim lot As String = arrLot(i)
                Dim alphaIndex As Integer = lot.IndexOfAny(alphaArr)
                lot = lot.Remove(alphaIndex, Len(lot) - alphaIndex)

                If arrQty Is Nothing Then
                    'if there are no qtys for lots just put a 0
                    adapBatch.Insert(arrLot(i), spcline, 0, lot)
                Else
                    'if there is qty for a lot put it against the lot
                    adapBatch.Insert(arrLot(i), spcline, arrQty(i), lot)
                End If
                i = i + 1
            Loop

        End If

        'add to item master table if not already there
        Try


            Dim adapItem As New RoutingsTableAdapters.LeaP_ItemMasterTableAdapter
            adapItem.Insert(itemcode, 1, dt.Rows(countrow).Item(10) & dt.Rows(countrow).Item(11))
        Catch ex As Exception

        End Try

    End Sub
#End Region
#Region "Update Line"


    Sub spc_update_line(ByVal countrow As Integer, ByVal spcid As Integer)

        Dim TPCOrdNo As String = dt.Rows(countrow).Item(2)
        '--
        Dim TILFinalApproval As Date = Nothing
        If Not IsDBNull(dt.Rows(countrow).Item(5)) Then
            TILFinalApproval = dt.Rows(countrow).Item(5)
        End If
        '--
        Dim TPCConfirmedCollectionDate As Date = Nothing
        If Not IsDBNull(dt.Rows(countrow).Item(7)) Then
            TPCConfirmedCollectionDate = dt.Rows(countrow).Item(7)
        End If
        '--
        Dim itemcode As String = dt.Rows(countrow).Item(8) & dt.Rows(countrow).Item(9)
        '--
        Dim TPCOrderQuantity As Integer = dt.Rows(countrow).Item(12)
        '--
        Dim TILShippingMemoDate As Date
        Dim TILShippingMemoDateType As Type = dt.Rows(countrow).Item(6).GetType
        If TILShippingMemoDateType.FullName = "System.String" Then
            TILShippingMemoDate = DateTime.FromOADate(CDbl(dt.Rows(countrow).Item(6)))
        ElseIf TILShippingMemoDateType.FullName = "System.DateTime" Then
            TILShippingMemoDate = dt.Rows(countrow).Item(6)
        End If

        Dim adapSPC As New ShipPlanComTableAdapters.QueriesTableAdapter

        adapSPC.UpdateSPCLine(itemcode, TPCOrderQuantity, TILFinalApproval, TILShippingMemoDate, TPCConfirmedCollectionDate, TPCOrdNo, spcid)

        'delete exisiting batches for spcline
        adapSPC.DeleteBatchesBySPCID(spcid)

        'recreate the batches
        Dim adapBatch As New ShipPlanComTableAdapters.LeaP_spcBatchesTableAdapter

        Dim d As Char = Chr(10)

        Dim tilPlannedlot As String = Nothing
        Dim arrLot() As String = Nothing
        If Not IsDBNull(dt.Rows(countrow).Item(14)) Then
            tilPlannedlot = dt.Rows(countrow).Item(14)
            arrLot = Split(tilPlannedlot, d)
        End If


        Dim arrQty() As String = Nothing
        Dim TILPlannedQuantity As String = Nothing

        If Not IsDBNull(dt.Rows(countrow).Item(13)) Then
            If Not dt.Rows(countrow).Item(13) Like "*TBA*" Or dt.Rows(countrow).Item(13) = "" Then
                TILPlannedQuantity = dt.Rows(countrow).Item(13)
                arrQty = Split(TILPlannedQuantity, d)
            End If
        End If


        If Not arrLot Is Nothing Then
            'if there are no lots dont add anything



            Dim i As Integer = 0
            Do Until i = arrLot.Count

                Dim lot As String = arrLot(i)
                Dim alphaIndex As Integer = lot.IndexOfAny(alphaArr)
                lot = lot.Remove(alphaIndex, Len(lot) - alphaIndex)


                If arrQty Is Nothing Then
                    'if there are no qtys for lots just put a 0
                    adapBatch.Insert(arrLot(i), spcid, 0, lot)
                Else
                    'if there is qty for a lot put it against the lot
                    adapBatch.Insert(arrLot(i), spcid, arrQty(i), lot)
                End If
                i = i + 1
            Loop

        End If

    End Sub
#End Region
#Region "helpers"


    Sub clear()
        Dim myadap As New ShipPlanComTableAdapters.QueriesTableAdapter
        myadap.DeleteBatches()
        myadap.DeleteSPC()
    End Sub
#End Region
#Region "Calc routings"


    Sub GenerateRoutings()
        Dim adapQ As New RoutingsTableAdapters.QueriesTableAdapter
        adapQ.DeleteRouteData()

        'get all the batches which require routings (perhaps this can be set to only batches which have not shipped or do not have work orders available?)
        Dim adap As New dsBatchTableAdapters.BatchDetailsTableAdapter
        Dim dt As New dsBatch.BatchDetailsDataTable

        dt = adap.GetData()

        For Each row As dsBatch.BatchDetailsRow In dt

            Call routeit(row)

        Next
        'for each batch generate a routing
    End Sub

    Sub routeit(ByVal row As dsBatch.BatchDetailsRow)

        'get the routing for this item
        Dim adapRouteCalc As New RoutingsTableAdapters.RouteCalcDetailsTableAdapter
        Dim dtRouteCalc As New Routings.RouteCalcDetailsDataTable
        dtRouteCalc = adapRouteCalc.GetData(row.ItemCode)

        'fill in the RouteData Table with the information
        Dim enddate As Date = row.TILFinalApprovalDate
        Dim nextWorkCentre As Integer
        Dim adapRouteData As New RoutingsTableAdapters.LeaP_RouteDataTableAdapter

        'set the routing for shipment for the specific batch
        adapRouteData.Insert(row.spcBatchID, 5, row.TPCConfirmedCollectionDate, row.TPCConfirmedCollectionDate, 80, 0)
        nextWorkCentre = 5

        For Each rowCalc As Routings.RouteCalcDetailsRow In dtRouteCalc
            Dim startdate As Date = DateAdd(DateInterval.Hour, -rowCalc.TotalDuration, enddate)
            adapRouteData.Insert(row.spcBatchID, rowCalc.WorkCentreID, startdate, enddate, rowCalc.WorkCentreCompleteTransaction, nextWorkCentre)
            enddate = startdate
            nextWorkCentre = rowCalc.WorkCentreID
        Next

    End Sub

#End Region
#Region "Presentation Handlers"


    Public LotNumber As String
    Protected Sub GridView3_RowDataBound(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.GridViewRowEventArgs) Handles GridView3.RowDataBound

        If e.Row.RowType = DataControlRowType.DataRow Then

            If Not e.Row.Cells(5).Text = "&nbsp;" Then
                If CDate(e.Row.Cells(4).Text) < CDate(e.Row.Cells(5).Text) Then
                    e.Row.Cells(5).BackColor = Drawing.Color.Red
                ElseIf CDate(e.Row.Cells(4).Text) > CDate(e.Row.Cells(5).Text) Then
                    e.Row.Cells(5).BackColor = Drawing.Color.Green
                ElseIf CDate(e.Row.Cells(4).Text) = CDate(e.Row.Cells(5).Text) Then
                    e.Row.Cells(5).BackColor = Drawing.Color.Green
                End If
            End If

            Dim newLotNumber As String = e.Row.Cells(1).Text

            If newLotNumber = LotNumber Then

                e.Row.Cells(1).Text = ""
            Else
                LotNumber = newLotNumber
            End If

        End If
    End Sub

    Protected Sub GridView1_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles GridView1.SelectedIndexChanged
        ModalPopupExtender1.Show()
        GridView3.DataBind()
    End Sub

#End Region



End Class
