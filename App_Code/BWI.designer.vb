'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18449
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LEAPPROD111208")>  _
Partial Public Class BWIDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLeaP_BWIHeader(instance As LeaP_BWIHeader)
    End Sub
  Partial Private Sub UpdateLeaP_BWIHeader(instance As LeaP_BWIHeader)
    End Sub
  Partial Private Sub DeleteLeaP_BWIHeader(instance As LeaP_BWIHeader)
    End Sub
  Partial Private Sub InsertLeaP_BWILot(instance As LeaP_BWILot)
    End Sub
  Partial Private Sub UpdateLeaP_BWILot(instance As LeaP_BWILot)
    End Sub
  Partial Private Sub DeleteLeaP_BWILot(instance As LeaP_BWILot)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("LeaPDevConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property LeaP_BWIHeaders() As System.Data.Linq.Table(Of LeaP_BWIHeader)
		Get
			Return Me.GetTable(Of LeaP_BWIHeader)
		End Get
	End Property
	
	Public ReadOnly Property LeaP_BWILots() As System.Data.Linq.Table(Of LeaP_BWILot)
		Get
			Return Me.GetTable(Of LeaP_BWILot)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertBWI")>  _
	Public Function InsertBWI(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PRNumber", DbType:="NVarChar(10)")> ByVal pRNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Creator", DbType:="NVarChar(30)")> ByVal creator As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CreatedDate", DbType:="DateTime")> ByVal createdDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByRef bwiID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pRNumber, creator, createdDate, bwiID)
		bwiID = CType(result.GetParameterValue(3),System.Nullable(Of Integer))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LeaP_BWIHeader")>  _
Partial Public Class LeaP_BWIHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bwiID As Integer
	
	Private _PRNumber As String
	
	Private _Creator As String
	
	Private _CreatedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbwiIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbwiIDChanged()
    End Sub
    Partial Private Sub OnPRNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPRNumberChanged()
    End Sub
    Partial Private Sub OnCreatorChanging(value As String)
    End Sub
    Partial Private Sub OnCreatorChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bwiID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property bwiID() As Integer
		Get
			Return Me._bwiID
		End Get
		Set
			If ((Me._bwiID = value)  _
						= false) Then
				Me.OnbwiIDChanging(value)
				Me.SendPropertyChanging
				Me._bwiID = value
				Me.SendPropertyChanged("bwiID")
				Me.OnbwiIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PRNumber", DbType:="NVarChar(10)")>  _
	Public Property PRNumber() As String
		Get
			Return Me._PRNumber
		End Get
		Set
			If (String.Equals(Me._PRNumber, value) = false) Then
				Me.OnPRNumberChanging(value)
				Me.SendPropertyChanging
				Me._PRNumber = value
				Me.SendPropertyChanged("PRNumber")
				Me.OnPRNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Creator", DbType:="NVarChar(30)")>  _
	Public Property Creator() As String
		Get
			Return Me._Creator
		End Get
		Set
			If (String.Equals(Me._Creator, value) = false) Then
				Me.OnCreatorChanging(value)
				Me.SendPropertyChanging
				Me._Creator = value
				Me.SendPropertyChanged("Creator")
				Me.OnCreatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LeaP_BWILots")>  _
Partial Public Class LeaP_BWILot
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _bwiLotID As Integer
	
	Private _bwiLotNumber As String
	
	Private _ContainerIDs As String
	
	Private _bwiID As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnbwiLotIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnbwiLotIDChanged()
    End Sub
    Partial Private Sub OnbwiLotNumberChanging(value As String)
    End Sub
    Partial Private Sub OnbwiLotNumberChanged()
    End Sub
    Partial Private Sub OnContainerIDsChanging(value As String)
    End Sub
    Partial Private Sub OnContainerIDsChanged()
    End Sub
    Partial Private Sub OnbwiIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnbwiIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bwiLotID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property bwiLotID() As Integer
		Get
			Return Me._bwiLotID
		End Get
		Set
			If ((Me._bwiLotID = value)  _
						= false) Then
				Me.OnbwiLotIDChanging(value)
				Me.SendPropertyChanging
				Me._bwiLotID = value
				Me.SendPropertyChanged("bwiLotID")
				Me.OnbwiLotIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bwiLotNumber", DbType:="NVarChar(15)")>  _
	Public Property bwiLotNumber() As String
		Get
			Return Me._bwiLotNumber
		End Get
		Set
			If (String.Equals(Me._bwiLotNumber, value) = false) Then
				Me.OnbwiLotNumberChanging(value)
				Me.SendPropertyChanging
				Me._bwiLotNumber = value
				Me.SendPropertyChanged("bwiLotNumber")
				Me.OnbwiLotNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContainerIDs", DbType:="NVarChar(1000)")>  _
	Public Property ContainerIDs() As String
		Get
			Return Me._ContainerIDs
		End Get
		Set
			If (String.Equals(Me._ContainerIDs, value) = false) Then
				Me.OnContainerIDsChanging(value)
				Me.SendPropertyChanging
				Me._ContainerIDs = value
				Me.SendPropertyChanged("ContainerIDs")
				Me.OnContainerIDsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_bwiID", DbType:="Int")>  _
	Public Property bwiID() As System.Nullable(Of Integer)
		Get
			Return Me._bwiID
		End Get
		Set
			If (Me._bwiID.Equals(value) = false) Then
				Me.OnbwiIDChanging(value)
				Me.SendPropertyChanging
				Me._bwiID = value
				Me.SendPropertyChanged("bwiID")
				Me.OnbwiIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
